笔记04


	Servlet 容器：运行Servlet,JSP,Filter等软件环境
			可以用来创建Servlet，并调用Servlet的相关 生命周期
			
	Servlet 生命周期的方法：所有方法都是由Servlet容器负责调用
		1.构造器：
			只会被调用一次，只有第一次请求Servlet时，创建Servlet的实列，调用构造器，这说明servlet是单实列的(线程安全)
		2.init方法：
			只被调用一次，在创建好实列后立即被调用，用于初始化当前Servlet	
		3.service：
			每次多次调用，每次请求都会调用service方法 实际用于响应请求的
		4.destroy：			
			只会被调用一次，在当前Servlet所在的WEB应用被卸载前调用用于释放当前Servlet所占的资源		
	
	WebContent->WEB-INF->web.xml的配置
		<!-- 配置 -->
		<servlet>
			<!-- Servlet 注册的名字  可以任意 但不可重复 -->
			<servlet-name>XXX</servlet-name>
			<!-- Servlet 的全类名 -->
			<servlet-class>com.kc.review.HelloServlet</servlet-class>
			<!-- 可以指定Servlet创建的时机    若为负数则在第一次请求时被创建，若为0或正数，则在当前WWEB应用中被Servlet容器加载时创建实列，且数越小月早被创建   -->
			<load-on-startup>x</load-on-startup>
		</servlet>
		<!-- 映射 -->
		<servlet-mapping>
			<!-- 需要和某一个servlet节点的servlet-name子节点的文本接节点一致 -->
			<servlet-name>XXX</servlet-name>
			<!-- 映射具体的访问路径：/ 代表当前WEB应用的根目录   URL通配符（  *.后面不能有文件名 或  以  /*  结尾）-->
			<url-pattern>/plo</url-pattern>
		</servlet-mapping>


		配置init方法的局部参数 （必须在load-on-startup之前 ）
			<!-- 配置init的参数 -->
			<init-param>
				<param-name>user</param-name> 参数名
				<param-value>yige</param-value> 参数值
			</init-param>
			
		 配置WEB全局参数
		<context-param>
			<param-name>XXX</param-name>
			<param-value>xxx</param-value>
		</context-param>
		
	ServletConfig	
		1.getInitParameter(String name) 
			参数：配置的init的参数名 
			返回对应的参数值
		2.getInitParameterNames()
			返回所有参数构成的一个枚举类Enumeration
		3.getServletName()
			返回配置名（Servlet 注册的名字 ）
		4.getServletContext()
			返回ServletContext对象(是servlet的大管家)
			由于WEB应用程序中的所有Servlet都共享一个ServletContext对象，
			所以ServletContext对象被称为application对象(Web应用程序对象)
			
		 	ServletContext	
				4.1.getInitParameter()
				4.2.getInitParameterNames()
				4.3.getRealPath(String path)
						获取当前WEB 应用的某个文件在服务器上的的绝对路径(只能是WebContent文件下的)而不是部署前的路径
				4.4.getContextPath()
						获取当前WEB 应用的名称
				4.5.getResourceAsStream("test1.properties")	获取当前WEB应用的某一个文件对应的输入流
						ClassLoader classLoader = getClass().getClassLoader();
						InputStream resourceAsStream = classLoader.getResourceAsStream("test1.properties");
		
						InputStream resourceAsStream = servletContext.getResourceAsStream("/WEB-INF/classes/test1.properties");
						System.out.println("-->:"+resourceAsStream);




























