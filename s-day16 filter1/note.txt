

	Filter 过滤器
	
	如何创建一个 Filter ：
		1.实现 javax.servlet.Filter 的 Filter 接口	
			public void destroy() {} //只使用一次 在Filter销毁前调用
			//初始化 filter
			public void init(FilterConfig fConfig) throws ServletException {
				FilterConfig ：可以在 web.xml 中配置当前 Filter 的初始化参数 (与 ServletConfig 类似)	
				
			} 
			
			//Filter 正真要实现的逻辑（功能）
			public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
				throws IOException, ServletException {
				
				/*
				 *	FilterChain	:Filter 链，多个 Filter 可以够成一个 Filter 链
				 * 		doFilter(ServletRequest request, ServletResponse response)
				 *			将请求传给 Filter 链的下一个 Filter，若当前 Filter 是 Filter 链的最后一个 Filter，则将请求给 Servlet(或JSP)
				 */
				chain.doFilter(request, response);
			}
		
		2.在 web.xml 文件中配置(与 Servlet 类似)
			filter-mapping 配置在前面的先执行
			<filter-mapping>
				<filter-name>testFilter</filter-name>
				<url-pattern>/test.jsp</url-pattern>   url-pattern：配置的是需要过滤的文件
				<dispatcher>xxx</dispatcher>
				dispatcher:指定过滤器拦截资源被 Servlet 容器调用的方式
					①：REQUEST：直接访问页面时，Web 容器将会调用过滤器，如果目标资源是通过 RequestDispatcher 的 include() 或 forward() 方法调用时过滤器就会通过 GET 或 POST 请求直接访问
					②：FORWORD:如果目标资源通过 RequestDispatcher 的  forward() 方法访问时，那么该过滤器将会被调用，除此之外，该过滤器不会被调用
							<jsp:forward page=" xxx "> 或  通过 page 指令的 errorPage 转发页面：<%@ page errorPage=" xxx " %>
					③：INCLUDE：
						<jsp:include page=" xxx ">
					④：ERROR
						<error-page>
							<exception-type> xxx </exception-type>
							<location> xxx </location>
						</error-page>
			</filter-mapping>







































